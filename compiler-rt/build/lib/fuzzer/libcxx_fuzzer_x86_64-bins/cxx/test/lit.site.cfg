## Autogenerated by libcxx configuration.
# Do not edit!

import os
import site

config.cxx_under_test           = "/usr/bin/c++"
config.project_obj_root         = "/home/llvm-project/compiler-rt/build/lib/fuzzer/libcxx_fuzzer_x86_64-bins"
config.libcxx_src_root          = "/home/llvm-project/libcxx"
config.libcxx_obj_root          = "/home/llvm-project/compiler-rt/build/lib/fuzzer/libcxx_fuzzer_x86_64-bins/cxx"
config.cxx_library_root         = "/home/llvm-project/compiler-rt/build/lib/fuzzer/libcxx_fuzzer_x86_64/lib"
config.enable_exceptions        = False
config.enable_experimental      = False
config.enable_filesystem        = True
config.enable_rtti              = True
config.enable_shared            = False
config.enable_32bit             = False
config.cxx_abi                  = "none"
config.use_sanitizer            = ""
config.sanitizer_library        = ""
config.abi_library_path         = ""
config.configuration_variant    = "libcxx"
config.host_triple              = ""
config.target_triple            = ""
config.use_target               = bool("")
config.sysroot                  = ""
config.gcc_toolchain            = ""
config.generate_coverage        = False
config.target_info              = "libcxx.test.target_info.LocalTI"
config.test_linker_flags        = ""
config.test_compiler_flags      = ""

config.executor                 = "/usr/bin/python3.8 /home/llvm-project/libcxx/test/../utils/run.py"
config.llvm_unwinder            = False
config.builtins_library         = ""
config.has_libatomic            = True
config.debug_build              = False
config.libcxxabi_shared         = False
config.cxx_ext_threads          = False
config.pstl_src_root            = "" if False else None
config.pstl_obj_root            = "" if False else None
config.libcxx_gdb               = ""

# Code signing
config.llvm_codesign_identity   = ""

site.addsitedir(os.path.join(config.libcxx_src_root, 'utils'))

# name: The name of this test suite.
config.name = 'libc++'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.pass.cpp', '.fail.cpp', '.sh.cpp', '.pass.mm']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.join(config.libcxx_src_root, 'test')

# Allow expanding substitutions that are based on other substitutions
config.recursiveExpansionLimit = 10

# Infer the test_exec_root from the libcxx_object root.
config.test_exec_root = os.path.join(config.libcxx_obj_root, 'test')

import libcxx.test.format
config.test_format = libcxx.test.format.CxxStandardLibraryTest()

lit_config.note('Using configuration variant: {}'.format(config.configuration_variant))
import libcxx.test.config
configuration = libcxx.test.config.Configuration(lit_config, config)
configuration.configure()
configuration.print_config_info()
